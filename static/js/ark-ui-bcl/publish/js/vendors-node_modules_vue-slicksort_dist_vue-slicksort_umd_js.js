/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk$Bcl"] = self["webpackChunk$Bcl"] || []).push([["vendors-node_modules_vue-slicksort_dist_vue-slicksort_umd_js"],{

/***/ "./node_modules/vue-slicksort/dist/vue-slicksort.umd.js":
/*!**************************************************************!*\
  !*** ./node_modules/vue-slicksort/dist/vue-slicksort.umd.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n\t true ? factory(exports) :\n\t0;\n}(this, (function (exports) { 'use strict';\n\n// Export Sortable Element Component Mixin\nvar ElementMixin = {\n  inject: ['manager'],\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    collection: {\n      type: [String, Number],\n      default: 'default'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  mounted: function mounted() {\n    var _$props = this.$props,\n        collection = _$props.collection,\n        disabled = _$props.disabled,\n        index = _$props.index;\n\n\n    if (!disabled) {\n      this.setDraggable(collection, index);\n    }\n  },\n\n\n  watch: {\n    index: function index(newIndex) {\n      if (this.$el && this.$el.sortableInfo) {\n        this.$el.sortableInfo.index = newIndex;\n      }\n    },\n    disabled: function disabled(isDisabled) {\n      if (isDisabled) {\n        this.removeDraggable(this.collection);\n      } else {\n        this.setDraggable(this.collection, this.index);\n      }\n    },\n    collection: function collection(newCollection, oldCollection) {\n      this.removeDraggable(oldCollection);\n      this.setDraggable(newCollection, this.index);\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    var collection = this.collection,\n        disabled = this.disabled;\n\n\n    if (!disabled) this.removeDraggable(collection);\n  },\n\n  methods: {\n    setDraggable: function setDraggable(collection, index) {\n      var node = this.$el;\n\n      node.sortableInfo = {\n        index: index,\n        collection: collection,\n        manager: this.manager\n      };\n\n      this.ref = { node: node };\n      this.manager.add(collection, this.ref);\n    },\n    removeDraggable: function removeDraggable(collection) {\n      this.manager.remove(collection, this.ref);\n    }\n  }\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Manager = function () {\n  function Manager() {\n    classCallCheck(this, Manager);\n\n    this.refs = {};\n  }\n\n  createClass(Manager, [{\n    key: \"add\",\n    value: function add(collection, ref) {\n      if (!this.refs[collection]) {\n        this.refs[collection] = [];\n      }\n\n      this.refs[collection].push(ref);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(collection, ref) {\n      var index = this.getIndex(collection, ref);\n\n      if (index !== -1) {\n        this.refs[collection].splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"getActive\",\n    value: function getActive() {\n      var _this = this;\n\n      return this.refs[this.active.collection].find(function (_ref) {\n        var node = _ref.node;\n        return node.sortableInfo.index == _this.active.index;\n      });\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(collection, ref) {\n      return this.refs[collection].indexOf(ref);\n    }\n  }, {\n    key: \"getOrderedRefs\",\n    value: function getOrderedRefs() {\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;\n\n      return this.refs[collection].sort(function (a, b) {\n        return a.node.sortableInfo.index - b.node.sortableInfo.index;\n      });\n    }\n  }]);\n  return Manager;\n}();\n\nfunction arrayMove(arr, previousIndex, newIndex) {\n  var array = arr.slice(0);\n  if (newIndex >= array.length) {\n    var k = newIndex - array.length;\n    while (k-- + 1) {\n      array.push(undefined);\n    }\n  }\n  array.splice(newIndex, 0, array.splice(previousIndex, 1)[0]);\n  return array;\n}\n\nvar events = {\n  start: ['touchstart', 'mousedown'],\n  move: ['touchmove', 'mousemove'],\n  end: ['touchend', 'touchcancel', 'mouseup']\n};\n\nvar vendorPrefix = function () {\n  if (typeof window === 'undefined' || typeof document === 'undefined') return ''; // server environment\n  // fix for:\n  //    https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  //    window.getComputedStyle() returns null inside an iframe with display: none\n  // in this case return an array with a fake mozilla style in it.\n  var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];\n  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];\n\n  switch (pre) {\n    case 'ms':\n      return 'ms';\n    default:\n      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';\n  }\n}();\n\nfunction closest(el, fn) {\n  while (el) {\n    if (fn(el)) return el;\n    el = el.parentNode;\n  }\n}\n\nfunction limit(min, max, value) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nfunction getCSSPixelValue(stringValue) {\n  if (stringValue.substr(-2) === 'px') {\n    return parseFloat(stringValue);\n  }\n  return 0;\n}\n\nfunction getElementMargin(element) {\n  var style = window.getComputedStyle(element);\n\n  return {\n    top: getCSSPixelValue(style.marginTop),\n    right: getCSSPixelValue(style.marginRight),\n    bottom: getCSSPixelValue(style.marginBottom),\n    left: getCSSPixelValue(style.marginLeft)\n  };\n}\n\n// Export Sortable Container Component Mixin\nvar ContainerMixin = {\n  data: function data() {\n    return {\n      sorting: false,\n      sortingIndex: null,\n      manager: new Manager(),\n      events: {\n        start: this.handleStart,\n        move: this.handleMove,\n        end: this.handleEnd\n      }\n    };\n  },\n\n\n  props: {\n    value: { type: Array, required: true },\n    axis: { type: String, default: 'y' }, // 'x', 'y', 'xy'\n    distance: { type: Number, default: 0 },\n    pressDelay: { type: Number, default: 0 },\n    pressThreshold: { type: Number, default: 5 },\n    useDragHandle: { type: Boolean, default: false },\n    useWindowAsScrollContainer: { type: Boolean, default: false },\n    hideSortableGhost: { type: Boolean, default: true },\n    lockToContainerEdges: { type: Boolean, default: false },\n    lockOffset: { type: [String, Number, Array], default: '50%' },\n    transitionDuration: { type: Number, default: 300 },\n    appendTo: { type: String, default: 'body' },\n    draggedSettlingDuration: { type: Number, default: null },\n    lockAxis: String,\n    helperClass: String,\n    contentWindow: Object,\n    shouldCancelStart: {\n      type: Function,\n      default: function _default(e) {\n        // Cancel sorting if the event target is an `input`, `textarea`, `select` or `option`\n        var disabledElements = ['input', 'textarea', 'select', 'option', 'button'];\n        return disabledElements.indexOf(e.target.tagName.toLowerCase()) !== -1;\n      }\n    },\n    getHelperDimensions: {\n      type: Function,\n      default: function _default(_ref) {\n        var node = _ref.node;\n        return {\n          width: node.offsetWidth,\n          height: node.offsetHeight\n        };\n      }\n    }\n  },\n\n  provide: function provide() {\n    return {\n      manager: this.manager\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.container = this.$el;\n    this.document = this.container.ownerDocument || document;\n    this._window = this.contentWindow || window;\n    this.scrollContainer = this.useWindowAsScrollContainer ? this.document.body : this.container;\n\n    var _loop = function _loop(key) {\n      if (_this.events.hasOwnProperty(key)) {\n        events[key].forEach(function (eventName) {\n          return _this.container.addEventListener(eventName, _this.events[key], { passive: true });\n        });\n      }\n    };\n\n    for (var key in this.events) {\n      _loop(key);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this2 = this;\n\n    var _loop2 = function _loop2(key) {\n      if (_this2.events.hasOwnProperty(key)) {\n        events[key].forEach(function (eventName) {\n          return _this2.container.removeEventListener(eventName, _this2.events[key]);\n        });\n      }\n    };\n\n    for (var key in this.events) {\n      _loop2(key);\n    }\n  },\n\n\n  methods: {\n    handleStart: function handleStart(e) {\n      var _this3 = this;\n\n      var _$props = this.$props,\n          distance = _$props.distance,\n          shouldCancelStart = _$props.shouldCancelStart;\n\n\n      if (e.button === 2 || shouldCancelStart(e)) {\n        return false;\n      }\n\n      this._touched = true;\n      this._pos = this.getOffset(e);\n\n      var node = closest(e.target, function (el) {\n        return el.sortableInfo != null;\n      });\n\n      if (node && node.sortableInfo && this.nodeIsChild(node) && !this.sorting) {\n        var useDragHandle = this.$props.useDragHandle;\n        var _node$sortableInfo = node.sortableInfo,\n            index = _node$sortableInfo.index,\n            collection = _node$sortableInfo.collection;\n\n\n        if (useDragHandle && !closest(e.target, function (el) {\n          return el.sortableHandle != null;\n        })) return;\n\n        this.manager.active = { index: index, collection: collection };\n\n        /*\n        * Fixes a bug in Firefox where the :active state of anchor tags\n        * prevent subsequent 'mousemove' events from being fired\n        * (see https://github.com/clauderic/react-sortable-hoc/issues/118)\n        */\n        if (e.target.tagName.toLowerCase() === 'a') {\n          e.preventDefault();\n        }\n\n        if (!distance) {\n          if (this.$props.pressDelay === 0) {\n            this.handlePress(e);\n          } else {\n            this.pressTimer = setTimeout(function () {\n              return _this3.handlePress(e);\n            }, this.$props.pressDelay);\n          }\n        }\n      }\n    },\n    nodeIsChild: function nodeIsChild(node) {\n      return node.sortableInfo.manager === this.manager;\n    },\n    handleMove: function handleMove(e) {\n      var _$props2 = this.$props,\n          distance = _$props2.distance,\n          pressThreshold = _$props2.pressThreshold;\n\n\n      if (!this.sorting && this._touched) {\n        var offset = this.getOffset(e);\n        this._delta = {\n          x: this._pos.x - offset.x,\n          y: this._pos.y - offset.y\n        };\n        var delta = Math.abs(this._delta.x) + Math.abs(this._delta.y);\n\n        if (!distance && (!pressThreshold || pressThreshold && delta >= pressThreshold)) {\n          clearTimeout(this.cancelTimer);\n          this.cancelTimer = setTimeout(this.cancel, 0);\n        } else if (distance && delta >= distance && this.manager.isActive()) {\n          this.handlePress(e);\n        }\n      }\n    },\n    handleEnd: function handleEnd() {\n      var distance = this.$props.distance;\n\n\n      this._touched = false;\n\n      if (!distance) {\n        this.cancel();\n      }\n    },\n    cancel: function cancel() {\n      if (!this.sorting) {\n        clearTimeout(this.pressTimer);\n        this.manager.active = null;\n      }\n    },\n    handlePress: function handlePress(e) {\n      var _this4 = this;\n\n      e.stopPropagation();\n      var active = this.manager.getActive();\n\n      if (active) {\n        var _$props3 = this.$props,\n            axis = _$props3.axis,\n            getHelperDimensions = _$props3.getHelperDimensions,\n            helperClass = _$props3.helperClass,\n            hideSortableGhost = _$props3.hideSortableGhost,\n            useWindowAsScrollContainer = _$props3.useWindowAsScrollContainer,\n            appendTo = _$props3.appendTo;\n        var node = active.node,\n            collection = active.collection;\n        var index = node.sortableInfo.index;\n\n        var margin = getElementMargin(node);\n\n        var containerBoundingRect = this.container.getBoundingClientRect();\n        var dimensions = getHelperDimensions({ index: index, node: node, collection: collection });\n\n        this.node = node;\n        this.margin = margin;\n        this.width = dimensions.width;\n        this.height = dimensions.height;\n        this.marginOffset = {\n          x: this.margin.left + this.margin.right,\n          y: Math.max(this.margin.top, this.margin.bottom)\n        };\n        this.boundingClientRect = node.getBoundingClientRect();\n        this.containerBoundingRect = containerBoundingRect;\n        this.index = index;\n        this.newIndex = index;\n\n        this._axis = {\n          x: axis.indexOf('x') >= 0,\n          y: axis.indexOf('y') >= 0\n        };\n        this.offsetEdge = this.getEdgeOffset(node);\n        this.initialOffset = this.getOffset(e);\n        this.initialScroll = {\n          top: this.scrollContainer.scrollTop,\n          left: this.scrollContainer.scrollLeft\n        };\n\n        this.initialWindowScroll = {\n          top: window.pageYOffset,\n          left: window.pageXOffset\n        };\n\n        var fields = node.querySelectorAll('input, textarea, select');\n        var clonedNode = node.cloneNode(true);\n        var clonedFields = [].concat(toConsumableArray(clonedNode.querySelectorAll('input, textarea, select'))); // Convert NodeList to Array\n\n        clonedFields.forEach(function (field, index) {\n          if (field.type !== 'file' && fields[index]) {\n            field.value = fields[index].value;\n          }\n        });\n\n        this.helper = this.document.querySelector(appendTo).appendChild(clonedNode);\n\n        this.helper.style.position = 'fixed';\n        this.helper.style.top = this.boundingClientRect.top - margin.top + 'px';\n        this.helper.style.left = this.boundingClientRect.left - margin.left + 'px';\n        this.helper.style.width = this.width + 'px';\n        this.helper.style.height = this.height + 'px';\n        this.helper.style.boxSizing = 'border-box';\n        this.helper.style.pointerEvents = 'none';\n\n        if (hideSortableGhost) {\n          this.sortableGhost = node;\n          node.style.visibility = 'hidden';\n          node.style.opacity = 0;\n        }\n\n        this.translate = {};\n        this.minTranslate = {};\n        this.maxTranslate = {};\n        if (this._axis.x) {\n          this.minTranslate.x = (useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - this.boundingClientRect.left - this.width / 2;\n          this.maxTranslate.x = (useWindowAsScrollContainer ? this._window.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - this.boundingClientRect.left - this.width / 2;\n        }\n        if (this._axis.y) {\n          this.minTranslate.y = (useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - this.boundingClientRect.top - this.height / 2;\n          this.maxTranslate.y = (useWindowAsScrollContainer ? this._window.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - this.boundingClientRect.top - this.height / 2;\n        }\n\n        if (helperClass) {\n          var _helper$classList;\n\n          (_helper$classList = this.helper.classList).add.apply(_helper$classList, toConsumableArray(helperClass.split(' ')));\n        }\n\n        this.listenerNode = e.touches ? node : this._window;\n        events.move.forEach(function (eventName) {\n          return _this4.listenerNode.addEventListener(eventName, _this4.handleSortMove, false);\n        });\n        events.end.forEach(function (eventName) {\n          return _this4.listenerNode.addEventListener(eventName, _this4.handleSortEnd, false);\n        });\n\n        this.sorting = true;\n        this.sortingIndex = index;\n\n        this.$emit('sort-start', { event: e, node: node, index: index, collection: collection });\n      }\n    },\n    handleSortMove: function handleSortMove(e) {\n      e.preventDefault(); // Prevent scrolling on mobile\n\n      this.updatePosition(e);\n      this.animateNodes();\n      this.autoscroll();\n\n      this.$emit('sort-move', { event: e });\n    },\n    handleSortEnd: function handleSortEnd(e) {\n      var _this5 = this;\n\n      var collection = this.manager.active.collection;\n\n      // Remove the event listeners if the node is still in the DOM\n\n      if (this.listenerNode) {\n        events.move.forEach(function (eventName) {\n          return _this5.listenerNode.removeEventListener(eventName, _this5.handleSortMove);\n        });\n        events.end.forEach(function (eventName) {\n          return _this5.listenerNode.removeEventListener(eventName, _this5.handleSortEnd);\n        });\n      }\n\n      var nodes = this.manager.refs[collection];\n\n      var onEnd = function onEnd() {\n        // Remove the helper from the DOM\n        _this5.helper.parentNode.removeChild(_this5.helper);\n\n        if (_this5.hideSortableGhost && _this5.sortableGhost) {\n          _this5.sortableGhost.style.visibility = '';\n          _this5.sortableGhost.style.opacity = '';\n        }\n\n        for (var i = 0, len = nodes.length; i < len; i++) {\n          var node = nodes[i];\n          var el = node.node;\n\n          // Clear the cached offsetTop / offsetLeft value\n          node.edgeOffset = null;\n\n          // Remove the transforms / transitions\n          el.style[vendorPrefix + 'Transform'] = '';\n          el.style[vendorPrefix + 'TransitionDuration'] = '';\n        }\n\n        // Stop autoscroll\n        clearInterval(_this5.autoscrollInterval);\n        _this5.autoscrollInterval = null;\n\n        // Update state\n        _this5.manager.active = null;\n\n        _this5.sorting = false;\n        _this5.sortingIndex = null;\n\n        _this5.$emit('sort-end', {\n          event: e,\n          oldIndex: _this5.index,\n          newIndex: _this5.newIndex,\n          collection: collection\n        });\n        _this5.$emit('input', arrayMove(_this5.value, _this5.index, _this5.newIndex));\n\n        _this5._touched = false;\n      };\n\n      if (this.$props.transitionDuration || this.$props.draggedSettlingDuration) {\n        this.transitionHelperIntoPlace(nodes).then(function () {\n          return onEnd();\n        });\n      } else {\n        onEnd();\n      }\n    },\n    transitionHelperIntoPlace: function transitionHelperIntoPlace(nodes) {\n      var _this6 = this;\n\n      if (this.$props.draggedSettlingDuration === 0 || nodes.length === 0) {\n        return Promise.resolve();\n      }\n\n      var deltaScroll = {\n        left: this.scrollContainer.scrollLeft - this.initialScroll.left,\n        top: this.scrollContainer.scrollTop - this.initialScroll.top\n      };\n      var indexNode = nodes[this.index].node;\n      var newIndexNode = nodes[this.newIndex].node;\n\n      var targetX = -deltaScroll.left;\n      if (this.translate && this.translate.x > 0) {\n        // Diff against right edge when moving to the right\n        targetX += newIndexNode.offsetLeft + newIndexNode.offsetWidth - (indexNode.offsetLeft + indexNode.offsetWidth);\n      } else {\n        targetX += newIndexNode.offsetLeft - indexNode.offsetLeft;\n      }\n\n      var targetY = -deltaScroll.top;\n      if (this.translate && this.translate.y > 0) {\n        // Diff against the bottom edge when moving down\n        targetY += newIndexNode.offsetTop + newIndexNode.offsetHeight - (indexNode.offsetTop + indexNode.offsetHeight);\n      } else {\n        targetY += newIndexNode.offsetTop - indexNode.offsetTop;\n      }\n\n      var duration = this.$props.draggedSettlingDuration !== null ? this.$props.draggedSettlingDuration : this.$props.transitionDuration;\n\n      this.helper.style[vendorPrefix + 'Transform'] = 'translate3d(' + targetX + 'px,' + targetY + 'px, 0)';\n      this.helper.style[vendorPrefix + 'TransitionDuration'] = duration + 'ms';\n\n      return new Promise(function (resolve) {\n        // Register an event handler to clean up styles when the transition\n        // finishes.\n        var cleanup = function cleanup(event) {\n          if (!event || event.propertyName === 'transform') {\n            clearTimeout(cleanupTimer);\n            _this6.helper.style[vendorPrefix + 'Transform'] = '';\n            _this6.helper.style[vendorPrefix + 'TransitionDuration'] = '';\n            resolve();\n          }\n        };\n        // Force cleanup in case 'transitionend' never fires\n        var cleanupTimer = setTimeout(cleanup, duration + 10);\n        _this6.helper.addEventListener('transitionend', cleanup, false);\n      });\n    },\n    getEdgeOffset: function getEdgeOffset(node) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { top: 0, left: 0 };\n\n      // Get the actual offsetTop / offsetLeft value, no matter how deep the node is nested\n      if (node) {\n        var nodeOffset = {\n          top: offset.top + node.offsetTop,\n          left: offset.left + node.offsetLeft\n        };\n        if (node.parentNode !== this.container) {\n          return this.getEdgeOffset(node.parentNode, nodeOffset);\n        } else {\n          return nodeOffset;\n        }\n      }\n    },\n    getOffset: function getOffset(e) {\n      var _ref2 = e.touches ? e.touches[0] : e,\n          pageX = _ref2.pageX,\n          pageY = _ref2.pageY;\n\n      return {\n        x: pageX,\n        y: pageY\n      };\n    },\n    getLockPixelOffsets: function getLockPixelOffsets() {\n      var lockOffset = this.$props.lockOffset;\n\n\n      if (!Array.isArray(this.lockOffset)) {\n        lockOffset = [lockOffset, lockOffset];\n      }\n\n      if (lockOffset.length !== 2) {\n        throw new Error('lockOffset prop of SortableContainer should be a single value or an array of exactly two values. Given ' + lockOffset);\n      }\n\n      var _lockOffset = lockOffset,\n          _lockOffset2 = slicedToArray(_lockOffset, 2),\n          minLockOffset = _lockOffset2[0],\n          maxLockOffset = _lockOffset2[1];\n\n      return [this.getLockPixelOffset(minLockOffset), this.getLockPixelOffset(maxLockOffset)];\n    },\n    getLockPixelOffset: function getLockPixelOffset(lockOffset) {\n      var offsetX = lockOffset;\n      var offsetY = lockOffset;\n      var unit = 'px';\n\n      if (typeof lockOffset === 'string') {\n        var match = /^[+-]?\\d*(?:\\.\\d*)?(px|%)$/.exec(lockOffset);\n\n        if (match === null) {\n          throw new Error('lockOffset value should be a number or a string of a number followed by \"px\" or \"%\". Given ' + lockOffset);\n        }\n\n        offsetX = offsetY = parseFloat(lockOffset);\n        unit = match[1];\n      }\n\n      if (!isFinite(offsetX) || !isFinite(offsetY)) {\n        throw new Error('lockOffset value should be a finite. Given ' + lockOffset);\n      }\n\n      if (unit === '%') {\n        offsetX = offsetX * this.width / 100;\n        offsetY = offsetY * this.height / 100;\n      }\n\n      return {\n        x: offsetX,\n        y: offsetY\n      };\n    },\n    updatePosition: function updatePosition(e) {\n      var _$props4 = this.$props,\n          lockAxis = _$props4.lockAxis,\n          lockToContainerEdges = _$props4.lockToContainerEdges;\n\n\n      var offset = this.getOffset(e);\n      var translate = {\n        x: offset.x - this.initialOffset.x,\n        y: offset.y - this.initialOffset.y\n      };\n      // Adjust for window scroll\n      translate.y -= window.pageYOffset - this.initialWindowScroll.top;\n      translate.x -= window.pageXOffset - this.initialWindowScroll.left;\n\n      this.translate = translate;\n\n      if (lockToContainerEdges) {\n        var _getLockPixelOffsets = this.getLockPixelOffsets(),\n            _getLockPixelOffsets2 = slicedToArray(_getLockPixelOffsets, 2),\n            minLockOffset = _getLockPixelOffsets2[0],\n            maxLockOffset = _getLockPixelOffsets2[1];\n\n        var minOffset = {\n          x: this.width / 2 - minLockOffset.x,\n          y: this.height / 2 - minLockOffset.y\n        };\n        var maxOffset = {\n          x: this.width / 2 - maxLockOffset.x,\n          y: this.height / 2 - maxLockOffset.y\n        };\n\n        translate.x = limit(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);\n        translate.y = limit(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);\n      }\n\n      if (lockAxis === 'x') {\n        translate.y = 0;\n      } else if (lockAxis === 'y') {\n        translate.x = 0;\n      }\n\n      this.helper.style[vendorPrefix + 'Transform'] = 'translate3d(' + translate.x + 'px,' + translate.y + 'px, 0)';\n    },\n    animateNodes: function animateNodes() {\n      var _$props5 = this.$props,\n          transitionDuration = _$props5.transitionDuration,\n          hideSortableGhost = _$props5.hideSortableGhost;\n\n      var nodes = this.manager.getOrderedRefs();\n      var deltaScroll = {\n        left: this.scrollContainer.scrollLeft - this.initialScroll.left,\n        top: this.scrollContainer.scrollTop - this.initialScroll.top\n      };\n      var sortingOffset = {\n        left: this.offsetEdge.left + this.translate.x + deltaScroll.left,\n        top: this.offsetEdge.top + this.translate.y + deltaScroll.top\n      };\n      var scrollDifference = {\n        top: window.pageYOffset - this.initialWindowScroll.top,\n        left: window.pageXOffset - this.initialWindowScroll.left\n      };\n      this.newIndex = null;\n\n      for (var i = 0, len = nodes.length; i < len; i++) {\n        var node = nodes[i].node;\n\n        var index = node.sortableInfo.index;\n        var width = node.offsetWidth;\n        var height = node.offsetHeight;\n        var offset = {\n          width: this.width > width ? width / 2 : this.width / 2,\n          height: this.height > height ? height / 2 : this.height / 2\n        };\n\n        var translate = {\n          x: 0,\n          y: 0\n        };\n        var edgeOffset = nodes[i].edgeOffset;\n\n        // If we haven't cached the node's offsetTop / offsetLeft value\n\n        if (!edgeOffset) {\n          nodes[i].edgeOffset = edgeOffset = this.getEdgeOffset(node);\n        }\n\n        // Get a reference to the next and previous node\n        var nextNode = i < nodes.length - 1 && nodes[i + 1];\n        var prevNode = i > 0 && nodes[i - 1];\n\n        // Also cache the next node's edge offset if needed.\n        // We need this for calculating the animation in a grid setup\n        if (nextNode && !nextNode.edgeOffset) {\n          nextNode.edgeOffset = this.getEdgeOffset(nextNode.node);\n        }\n\n        // If the node is the one we're currently animating, skip it\n        if (index === this.index) {\n          if (hideSortableGhost) {\n            /*\n            * With windowing libraries such as `react-virtualized`, the sortableGhost\n            * node may change while scrolling down and then back up (or vice-versa),\n            * so we need to update the reference to the new node just to be safe.\n            */\n            this.sortableGhost = node;\n            node.style.visibility = 'hidden';\n            node.style.opacity = 0;\n          }\n          continue;\n        }\n\n        if (transitionDuration) {\n          node.style[vendorPrefix + 'TransitionDuration'] = transitionDuration + 'ms';\n        }\n\n        if (this._axis.x) {\n          if (this._axis.y) {\n            // Calculations for a grid setup\n            if (index < this.index && (sortingOffset.left + scrollDifference.left - offset.width <= edgeOffset.left && sortingOffset.top + scrollDifference.top <= edgeOffset.top + offset.height || sortingOffset.top + scrollDifference.top + offset.height <= edgeOffset.top)) {\n              // If the current node is to the left on the same row, or above the node that's being dragged\n              // then move it to the right\n              translate.x = this.width + this.marginOffset.x;\n              if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {\n                // If it moves passed the right bounds, then animate it to the first position of the next row.\n                // We just use the offset of the next node to calculate where to move, because that node's original position\n                // is exactly where we want to go\n                translate.x = nextNode.edgeOffset.left - edgeOffset.left;\n                translate.y = nextNode.edgeOffset.top - edgeOffset.top;\n              }\n              if (this.newIndex === null) {\n                this.newIndex = index;\n              }\n            } else if (index > this.index && (sortingOffset.left + scrollDifference.left + offset.width >= edgeOffset.left && sortingOffset.top + scrollDifference.top + offset.height >= edgeOffset.top || sortingOffset.top + scrollDifference.top + offset.height >= edgeOffset.top + height)) {\n              // If the current node is to the right on the same row, or below the node that's being dragged\n              // then move it to the left\n              translate.x = -(this.width + this.marginOffset.x);\n              if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {\n                // If it moves passed the left bounds, then animate it to the last position of the previous row.\n                // We just use the offset of the previous node to calculate where to move, because that node's original position\n                // is exactly where we want to go\n                translate.x = prevNode.edgeOffset.left - edgeOffset.left;\n                translate.y = prevNode.edgeOffset.top - edgeOffset.top;\n              }\n              this.newIndex = index;\n            }\n          } else {\n            if (index > this.index && sortingOffset.left + scrollDifference.left + offset.width >= edgeOffset.left) {\n              translate.x = -(this.width + this.marginOffset.x);\n              this.newIndex = index;\n            } else if (index < this.index && sortingOffset.left + scrollDifference.left <= edgeOffset.left + offset.width) {\n              translate.x = this.width + this.marginOffset.x;\n              if (this.newIndex == null) {\n                this.newIndex = index;\n              }\n            }\n          }\n        } else if (this._axis.y) {\n          if (index > this.index && sortingOffset.top + scrollDifference.top + offset.height >= edgeOffset.top) {\n            translate.y = -(this.height + this.marginOffset.y);\n            this.newIndex = index;\n          } else if (index < this.index && sortingOffset.top + scrollDifference.top <= edgeOffset.top + offset.height) {\n            translate.y = this.height + this.marginOffset.y;\n            if (this.newIndex == null) {\n              this.newIndex = index;\n            }\n          }\n        }\n        node.style[vendorPrefix + 'Transform'] = 'translate3d(' + translate.x + 'px,' + translate.y + 'px,0)';\n      }\n\n      if (this.newIndex == null) {\n        this.newIndex = this.index;\n      }\n    },\n    autoscroll: function autoscroll() {\n      var _this7 = this;\n\n      var translate = this.translate;\n      var direction = {\n        x: 0,\n        y: 0\n      };\n      var speed = {\n        x: 1,\n        y: 1\n      };\n      var acceleration = {\n        x: 10,\n        y: 10\n      };\n\n      if (translate.y >= this.maxTranslate.y - this.height / 2) {\n        direction.y = 1; // Scroll Down\n        speed.y = acceleration.y * Math.abs((this.maxTranslate.y - this.height / 2 - translate.y) / this.height);\n      } else if (translate.x >= this.maxTranslate.x - this.width / 2) {\n        direction.x = 1; // Scroll Right\n        speed.x = acceleration.x * Math.abs((this.maxTranslate.x - this.width / 2 - translate.x) / this.width);\n      } else if (translate.y <= this.minTranslate.y + this.height / 2) {\n        direction.y = -1; // Scroll Up\n        speed.y = acceleration.y * Math.abs((translate.y - this.height / 2 - this.minTranslate.y) / this.height);\n      } else if (translate.x <= this.minTranslate.x + this.width / 2) {\n        direction.x = -1; // Scroll Left\n        speed.x = acceleration.x * Math.abs((translate.x - this.width / 2 - this.minTranslate.x) / this.width);\n      }\n\n      if (this.autoscrollInterval) {\n        clearInterval(this.autoscrollInterval);\n        this.autoscrollInterval = null;\n        this.isAutoScrolling = false;\n      }\n\n      if (direction.x !== 0 || direction.y !== 0) {\n        this.autoscrollInterval = setInterval(function () {\n          _this7.isAutoScrolling = true;\n          var offset = {\n            left: 1 * speed.x * direction.x,\n            top: 1 * speed.y * direction.y\n          };\n          _this7.scrollContainer.scrollTop += offset.top;\n          _this7.scrollContainer.scrollLeft += offset.left;\n          _this7.translate.x += offset.left;\n          _this7.translate.y += offset.top;\n          _this7.animateNodes();\n        }, 5);\n      }\n    }\n  }\n};\n\n// Export Sortable Element Handle Directive\nvar HandleDirective = {\n  bind: function bind(el) {\n    el.sortableHandle = true;\n  }\n};\n\nfunction create(name, mixin) {\n  return {\n    name: name,\n    mixins: [mixin],\n    props: {\n      tag: {\n        type: String,\n        default: 'div'\n      }\n    },\n    render: function render(h) {\n      return h(this.tag, this.$slots.default);\n    }\n  };\n}\n\nvar SlickList = create('slick-list', ContainerMixin);\nvar SlickItem = create('slick-item', ElementMixin);\n\nexports.ElementMixin = ElementMixin;\nexports.ContainerMixin = ContainerMixin;\nexports.HandleDirective = HandleDirective;\nexports.SlickList = SlickList;\nexports.SlickItem = SlickItem;\nexports.arrayMove = arrayMove;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-slicksort/dist/vue-slicksort.umd.js\n");

/***/ })

}]);